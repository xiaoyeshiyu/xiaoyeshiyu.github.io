<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小夜时雨</title>
  <icon>https://www.xiaoyeshiyu.com/icon.png</icon>
  <subtitle>君子敬其在己者，而不慕其在天者，是以日进也。</subtitle>
  <link href="https://www.xiaoyeshiyu.com/atom.xml" rel="self"/>
  
  <link href="https://www.xiaoyeshiyu.com/"/>
  <updated>2024-01-16T03:59:08.907Z</updated>
  <id>https://www.xiaoyeshiyu.com/</id>
  
  <author>
    <name>Mitaka xu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kubernetes 控制平面组件：etcd</title>
    <link href="https://www.xiaoyeshiyu.com/post/387e.html"/>
    <id>https://www.xiaoyeshiyu.com/post/387e.html</id>
    <published>2024-01-09T16:00:00.000Z</published>
    <updated>2024-01-16T03:59:08.907Z</updated>
    
    
    <summary type="html">分布式键值存储系统 etcd 在 Kubernetes 架构中的关键作用。</summary>
    
    
    
    <category term="云原生训练营" scheme="https://www.xiaoyeshiyu.com/categories/%E4%BA%91%E5%8E%9F%E7%94%9F%E8%AE%AD%E7%BB%83%E8%90%A5/"/>
    
    
    <category term="学习笔记" scheme="https://www.xiaoyeshiyu.com/tags/Reference/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes 架构原则和对象设计</title>
    <link href="https://www.xiaoyeshiyu.com/post/ff15.html"/>
    <id>https://www.xiaoyeshiyu.com/post/ff15.html</id>
    <published>2024-01-03T16:00:00.000Z</published>
    <updated>2024-01-10T10:37:44.335Z</updated>
    
    
    <summary type="html">探讨 Kubernetes 核心设计原理和对象模型，通过详细分析 Kubernetes 的架构设计原则，以及对象如何在 Kubernetes 中发挥作用，了解这个开源容器编排平台的内部运作机制理解 Kubernetes 的设计哲学和对象模型，并探索如何有效地利用这些概念来构建可靠、可扩展的容器化应用程序。</summary>
    
    
    
    <category term="云原生训练营" scheme="https://www.xiaoyeshiyu.com/categories/%E4%BA%91%E5%8E%9F%E7%94%9F%E8%AE%AD%E7%BB%83%E8%90%A5/"/>
    
    
    <category term="学习笔记" scheme="https://www.xiaoyeshiyu.com/tags/Reference/"/>
    
  </entry>
  
  <entry>
    <title>Docker 核心技术</title>
    <link href="https://www.xiaoyeshiyu.com/post/cdb9.html"/>
    <id>https://www.xiaoyeshiyu.com/post/cdb9.html</id>
    <published>2023-12-28T16:00:00.000Z</published>
    <updated>2024-01-10T10:39:34.772Z</updated>
    
    
    <summary type="html">Docker 是如何实现轻量级、可移植和隔离化的容器化解决方案，从容器镜像到容器运行时，再到容器编排，介绍 Docker 技术栈的各个组成部分，并探讨它们是如何相互配合以提供高效、可靠的应用程序部署和管理环境的。</summary>
    
    
    
    <category term="云原生训练营" scheme="https://www.xiaoyeshiyu.com/categories/%E4%BA%91%E5%8E%9F%E7%94%9F%E8%AE%AD%E7%BB%83%E8%90%A5/"/>
    
    
    <category term="学习笔记" scheme="https://www.xiaoyeshiyu.com/tags/Reference/"/>
    
  </entry>
  
  <entry>
    <title>channel原理</title>
    <link href="https://www.xiaoyeshiyu.com/post/52fe.html"/>
    <id>https://www.xiaoyeshiyu.com/post/52fe.html</id>
    <published>2023-12-24T16:00:00.000Z</published>
    <updated>2023-12-26T01:21:17.740Z</updated>
    
    
    <summary type="html">通道是 Go 语言中用于协程之间通信的重要机制。通过阻塞和同步的方式，通道实现了安全的数据传递和协程之间的同步操作。通道的实现依赖于调度器和锁机制，通过队列和阻塞机制实现数据的传递。通道在并发编程中具有广泛的应用场景，可以提高程序的可靠性和性能。</summary>
    
    
    
    <category term="Go训练营" scheme="https://www.xiaoyeshiyu.com/categories/GoTrainingCamp/"/>
    
    
    <category term="学习笔记" scheme="https://www.xiaoyeshiyu.com/tags/Reference/"/>
    
  </entry>
  
  <entry>
    <title>Go runtime之 GC</title>
    <link href="https://www.xiaoyeshiyu.com/post/ede3.html"/>
    <id>https://www.xiaoyeshiyu.com/post/ede3.html</id>
    <published>2023-12-20T16:00:00.000Z</published>
    <updated>2023-12-29T08:11:29.875Z</updated>
    
    
    <summary type="html">Go runtime 的垃圾回收（Garbage Collection）是实现自动内存管理的关键组成部分。Go 的垃圾回收器采用了一系列策略和算法，旨在提供高效的内存回收，并减少开发者对内存管理的负担。</summary>
    
    
    
    <category term="Go训练营" scheme="https://www.xiaoyeshiyu.com/categories/GoTrainingCamp/"/>
    
    
    <category term="学习笔记" scheme="https://www.xiaoyeshiyu.com/tags/Reference/"/>
    
  </entry>
  
  <entry>
    <title>Go runtime之内存分配</title>
    <link href="https://www.xiaoyeshiyu.com/post/ab88.html"/>
    <id>https://www.xiaoyeshiyu.com/post/ab88.html</id>
    <published>2023-12-14T16:00:00.000Z</published>
    <updated>2023-12-22T09:03:21.292Z</updated>
    
    
    <summary type="html">Go runtime 的内存分配是其高效性和并发性的关键组成部分之一。Go 在内存分配方面采用了一些策略和算法，以提供快速的内存分配和高效的垃圾回收。</summary>
    
    
    
    <category term="Go训练营" scheme="https://www.xiaoyeshiyu.com/categories/GoTrainingCamp/"/>
    
    
    <category term="学习笔记" scheme="https://www.xiaoyeshiyu.com/tags/Reference/"/>
    
  </entry>
  
  <entry>
    <title>Go runtime之 Goroutine 原理</title>
    <link href="https://www.xiaoyeshiyu.com/post/c06b.html"/>
    <id>https://www.xiaoyeshiyu.com/post/c06b.html</id>
    <published>2023-12-12T16:00:00.000Z</published>
    <updated>2023-12-22T09:03:26.911Z</updated>
    
    
    <summary type="html">Goroutine 是 Go 编程语言中一种轻量级的并发执行单元，它是 Go runtime 的核心特性之一。Goroutine 允许开发者以一种简单、高效且可扩展的方式编写并发代码。</summary>
    
    
    
    <category term="Go训练营" scheme="https://www.xiaoyeshiyu.com/categories/GoTrainingCamp/"/>
    
    
    <category term="学习笔记" scheme="https://www.xiaoyeshiyu.com/tags/Reference/"/>
    
  </entry>
  
  <entry>
    <title>多活</title>
    <link href="https://www.xiaoyeshiyu.com/post/b09f.html"/>
    <id>https://www.xiaoyeshiyu.com/post/b09f.html</id>
    <published>2023-12-10T16:00:00.000Z</published>
    <updated>2023-12-12T08:33:33.122Z</updated>
    
    
    <summary type="html">本文将探讨多活（Multi-Region）架构在现代云计算和分布式系统中的重要性和应用。多活是一种设计原则和技术，通过在服务范围内部署多个数据中心或区域，实现高可用性、弹性和容错能力。</summary>
    
    
    
    <category term="Go训练营" scheme="https://www.xiaoyeshiyu.com/categories/GoTrainingCamp/"/>
    
    
    <category term="学习笔记" scheme="https://www.xiaoyeshiyu.com/tags/Reference/"/>
    
  </entry>
  
  <entry>
    <title>DNS &amp; CND</title>
    <link href="https://www.xiaoyeshiyu.com/post/9a24.html"/>
    <id>https://www.xiaoyeshiyu.com/post/9a24.html</id>
    <published>2023-12-06T16:00:00.000Z</published>
    <updated>2023-12-12T08:31:38.476Z</updated>
    
    
    <summary type="html">这篇文章将探讨DNS（域名系统）和CDN（内容分发网络）的重要性和功能，介绍一些常见的DNS和CDN优化策略，以提高网站的可用性、安全性和性能。</summary>
    
    
    
    <category term="Go训练营" scheme="https://www.xiaoyeshiyu.com/categories/GoTrainingCamp/"/>
    
    
    <category term="学习笔记" scheme="https://www.xiaoyeshiyu.com/tags/Reference/"/>
    
  </entry>
  
  <entry>
    <title>微服务可观察性之链路追踪</title>
    <link href="https://www.xiaoyeshiyu.com/post/c682.html"/>
    <id>https://www.xiaoyeshiyu.com/post/c682.html</id>
    <published>2023-12-05T16:00:00.000Z</published>
    <updated>2023-12-07T02:19:38.552Z</updated>
    
    
    <summary type="html">这篇文章将探讨微服务架构中关键的可观察性工具之一——链路追踪。我们将深入研究链路追踪的概念，重点介绍它在微服务环境中的作用和优势。</summary>
    
    
    
    <category term="Go训练营" scheme="https://www.xiaoyeshiyu.com/categories/GoTrainingCamp/"/>
    
    
    <category term="学习笔记" scheme="https://www.xiaoyeshiyu.com/tags/Reference/"/>
    
  </entry>
  
  <entry>
    <title>微服务可观察性之日志</title>
    <link href="https://www.xiaoyeshiyu.com/post/cfd3.html"/>
    <id>https://www.xiaoyeshiyu.com/post/cfd3.html</id>
    <published>2023-11-29T16:00:00.000Z</published>
    <updated>2023-12-06T03:51:43.543Z</updated>
    
    
    <summary type="html">这篇文章将深入探讨微服务架构中的可观察性，着重于日志记录作为关键的监控和调试工具。</summary>
    
    
    
    <category term="Go训练营" scheme="https://www.xiaoyeshiyu.com/categories/GoTrainingCamp/"/>
    
    
    <category term="学习笔记" scheme="https://www.xiaoyeshiyu.com/tags/Reference/"/>
    
  </entry>
  
  <entry>
    <title>Go网络编程</title>
    <link href="https://www.xiaoyeshiyu.com/post/4d37.html"/>
    <id>https://www.xiaoyeshiyu.com/post/4d37.html</id>
    <published>2023-11-08T16:00:00.000Z</published>
    <updated>2023-11-30T03:50:47.270Z</updated>
    
    
    <summary type="html">介绍通过 Go 实现一个网络协议，进而实现一个基于 TCP 长连接的 im 线上聊天框架。</summary>
    
    
    
    <category term="Go训练营" scheme="https://www.xiaoyeshiyu.com/categories/GoTrainingCamp/"/>
    
    
    <category term="学习笔记" scheme="https://www.xiaoyeshiyu.com/tags/Reference/"/>
    
  </entry>
  
  <entry>
    <title>分布式事务</title>
    <link href="https://www.xiaoyeshiyu.com/post/fa8f.html"/>
    <id>https://www.xiaoyeshiyu.com/post/fa8f.html</id>
    <published>2023-11-05T16:00:00.000Z</published>
    <updated>2023-11-29T09:43:45.064Z</updated>
    
    
    <summary type="html">在现代分布式系统中，数据一致性是至关重要的。而分布式事务作为一种关键的技术手段，能够确保在分布式环境下的数据操作的一致性。</summary>
    
    
    
    <category term="Go训练营" scheme="https://www.xiaoyeshiyu.com/categories/GoTrainingCamp/"/>
    
    
    <category term="学习笔记" scheme="https://www.xiaoyeshiyu.com/tags/Reference/"/>
    
  </entry>
  
  <entry>
    <title>分布式缓存</title>
    <link href="https://www.xiaoyeshiyu.com/post/8bda.html"/>
    <id>https://www.xiaoyeshiyu.com/post/8bda.html</id>
    <published>2023-11-01T16:00:00.000Z</published>
    <updated>2023-11-09T06:21:52.982Z</updated>
    
    
    <summary type="html">在当今的分布式系统中，高性能和可扩展性是至关重要的。而分布式缓存作为一种关键的技术手段，能够显著提升系统的性能和可扩展性。</summary>
    
    
    
    <category term="Go训练营" scheme="https://www.xiaoyeshiyu.com/categories/GoTrainingCamp/"/>
    
    
    <category term="学习笔记" scheme="https://www.xiaoyeshiyu.com/tags/Reference/"/>
    
  </entry>
  
  <entry>
    <title>架构设计之历史记录设计</title>
    <link href="https://www.xiaoyeshiyu.com/post/f986.html"/>
    <id>https://www.xiaoyeshiyu.com/post/f986.html</id>
    <published>2023-10-29T16:00:00.000Z</published>
    <updated>2023-11-02T07:02:57.744Z</updated>
    
    
    <summary type="html">历史记录是现代应用程序中常见的功能之一，它记录了用户在应用程序中的活动和操作。一个良好设计的历史记录系统可以提供方便的回放、导航和个性化推荐等功能，为用户提供更好的体验。</summary>
    
    
    
    <category term="Go训练营" scheme="https://www.xiaoyeshiyu.com/categories/GoTrainingCamp/"/>
    
    
    <category term="学习笔记" scheme="https://www.xiaoyeshiyu.com/tags/Reference/"/>
    
  </entry>
  
  <entry>
    <title>微服务可用性设计之降级、重试和负载均衡</title>
    <link href="https://www.xiaoyeshiyu.com/post/a2b0.html"/>
    <id>https://www.xiaoyeshiyu.com/post/a2b0.html</id>
    <published>2023-10-23T16:00:00.000Z</published>
    <updated>2023-12-06T10:10:28.303Z</updated>
    
    
    <summary type="html">介绍了降级、重试和负载均衡这三个策略，旨在提高微服务系统的可用性和稳定性。本文可以了解如何通过降级技术优雅地处理高负载和故障，确保核心功能的正常运行。通过不同的重试策略，以在网络不稳定或服务故障的情况下增加请求的成功率。介绍负载均衡的概念和不同的负载均衡算法，在微服务架构中合理分配请求，实现高可用性和性能优化。</summary>
    
    
    
    <category term="Go训练营" scheme="https://www.xiaoyeshiyu.com/categories/GoTrainingCamp/"/>
    
    
    <category term="学习笔记" scheme="https://www.xiaoyeshiyu.com/tags/Reference/"/>
    
  </entry>
  
  <entry>
    <title>微服务可用性设计之过载保护和限流</title>
    <link href="https://www.xiaoyeshiyu.com/post/7175.html"/>
    <id>https://www.xiaoyeshiyu.com/post/7175.html</id>
    <published>2023-10-22T16:00:00.000Z</published>
    <updated>2023-10-26T08:55:16.806Z</updated>
    
    
    <summary type="html">微服务架构中的过载保护和限流是确保系统可用性的关键策略之一。当微服务面临突发的高负载或异常情况时，合理的过载保护和限流机制可以防止系统崩溃，并保持对关键服务的稳定响应。本文将深入探讨微服务可用性设计中的过载保护和限流策略。我们将介绍过载保护和限流的概念和原理，讨论不同的实现方法和工具，以及如何根据业务需求和系统特点选择适合的策略。</summary>
    
    
    
    <category term="Go训练营" scheme="https://www.xiaoyeshiyu.com/categories/GoTrainingCamp/"/>
    
    
    <category term="学习笔记" scheme="https://www.xiaoyeshiyu.com/tags/Reference/"/>
    
  </entry>
  
  <entry>
    <title>微服务可用性设计之超时控制</title>
    <link href="https://www.xiaoyeshiyu.com/post/7397.html"/>
    <id>https://www.xiaoyeshiyu.com/post/7397.html</id>
    <published>2023-10-19T16:00:00.000Z</published>
    <updated>2023-10-26T08:55:16.800Z</updated>
    
    
    <summary type="html">在微服务架构中，超时控制是确保系统可用性的关键因素之一。当微服务之间存在网络延迟或故障时，合理的超时设置可以防止故障扩散，并提高整体系统的稳定性。本文将深入探讨微服务可用性设计中的超时控制策略。我们将介绍超时的重要性，讨论不同类型的超时模式，如请求级超时和资源级超时，并提供针对不同场景的最佳实践和实施建议。</summary>
    
    
    
    <category term="Go训练营" scheme="https://www.xiaoyeshiyu.com/categories/GoTrainingCamp/"/>
    
    
    <category term="学习笔记" scheme="https://www.xiaoyeshiyu.com/tags/Reference/"/>
    
  </entry>
  
  <entry>
    <title>微服务可用性设计之隔离</title>
    <link href="https://www.xiaoyeshiyu.com/post/40eb.html"/>
    <id>https://www.xiaoyeshiyu.com/post/40eb.html</id>
    <published>2023-10-18T16:00:00.000Z</published>
    <updated>2023-10-26T08:55:16.805Z</updated>
    
    
    <summary type="html">在当今的软件开发中，微服务架构已经成为一种流行的设计模式。然而，随着系统规模的增长和复杂性的提高，确保微服务的可用性变得越来越重要。本文将探讨微服务可用性设计中的一个关键概念：隔离。通过合理的隔离策略，我们可以有效地降低故障的传播范围，提高整体系统的稳定性和可靠性。</summary>
    
    
    
    <category term="Go训练营" scheme="https://www.xiaoyeshiyu.com/categories/GoTrainingCamp/"/>
    
    
    <category term="学习笔记" scheme="https://www.xiaoyeshiyu.com/tags/Reference/"/>
    
  </entry>
  
  <entry>
    <title>Go工程化实践之测试</title>
    <link href="https://www.xiaoyeshiyu.com/post/c73a.html"/>
    <id>https://www.xiaoyeshiyu.com/post/c73a.html</id>
    <published>2023-10-16T16:00:00.000Z</published>
    <updated>2023-10-20T08:01:02.637Z</updated>
    
    
    <summary type="html">在Go语言的开发过程中，测试是确保代码质量和可靠性的重要环节。良好的测试实践可以帮助我们捕捉潜在的错误、验证代码逻辑，并确保代码在不同场景下的正确行为。</summary>
    
    
    
    <category term="Go训练营" scheme="https://www.xiaoyeshiyu.com/categories/GoTrainingCamp/"/>
    
    
    <category term="学习笔记" scheme="https://www.xiaoyeshiyu.com/tags/Reference/"/>
    
  </entry>
  
</feed>
